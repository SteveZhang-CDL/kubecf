load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")
load("@dependencies//:def.bzl", "external_files")
load(
    "//rules/helm:def.bzl",
    helm_package = "package",
    helm_version = "version",
)
load("//rules/ioutil:def.bzl", "print_files")
load(
    "//rules/kubecf:def.bzl",
    "image_list",
    "metadata_file_generator",
)
load("//rules/yaml_extractor:defs.bzl", "yaml_extractor")

package(default_visibility = ["//visibility:public"])

# Generates the KubeCF metadata file.
metadata_file_generator(
    name = "metadata",
    file = "Metadata.yaml",
    operator_chart = external_files["cf_operator"]["url"].format(version = external_files["cf_operator"]["version"])
)

exports_files([
    "values.yaml",
])

# Groups the static files under the kubecf package to be passed to the Helm packaging target.
filegroup(
    name = "chart_files_static",
    srcs = glob(
        ["**/*"],
        exclude = [
            "**/*.bazel",
            "**/*.bzl",
        ],
    ),
)

# Packages cf-deployment into a tarball with a specific directory structure to be used by the Helm
# packaging target.
pkg_tar(
    name = "cf_deployment",
    package_dir = "assets",
    srcs = [
        "@cf_deployment//:cf_deployment",
    ],
)

# Extracts the auctioneer job YAML out of the scheduler instance group.
yaml_extractor(
    name = "auctioneer_job",
    src = "@cf_deployment//:cf-deployment.yml",
    filter = """.instance_groups[] | select(.name == "scheduler") | .jobs[] | select(.name == "auctioneer")""",
)

# Extracts the routing-api job YAML out of the api instance group.
yaml_extractor(
    name = "routing_api_job",
    src = "@cf_deployment//:cf-deployment.yml",
    filter = """.instance_groups[] | select(.name == "api") | .jobs[] | select(.name == "routing-api")""",
)

# The default list of jobs related to log-cache to be extracted out of the doppler instance group.
LOG_CACHE_JOBS = [
    "log-cache",
    "log-cache-gateway",
    "log-cache-nozzle",
    "log-cache-cf-auth-proxy",
    "route_registrar",
]

# Extracts the log-cache jobs out of the doppler instance group.
[yaml_extractor(
    name = "log_cache_{}_job".format(job).replace("-", "_"),
    src = "@cf_deployment//:cf-deployment.yml",
    filter = """.instance_groups[] | select(.name == "doppler") | .jobs[] | select(.name == "{job}")""".format(
        job = job,
    ),
) for job in LOG_CACHE_JOBS]

# Packages the extracted jobs into a tarball with a specific directory structure to be used by the
# Helm packaging target.
pkg_tar(
    name = "extracted_jobs",
    package_dir = "assets/jobs",
    srcs = [
        ":auctioneer_job",
        ":routing_api_job",
    ] + [":log_cache_{}_job".format(job).replace("-", "_") for job in LOG_CACHE_JOBS],
)

# Packages the KubeCF Helm chart.
helm_package(
    name = "kubecf",
    srcs = [
        ":chart_files_static",
    ],
    generated = [
        ":metadata",
    ],
    tars = [
        "//bosh/releases:pre_render_scripts",
        ":cf_deployment",
        ":extracted_jobs",
    ],
    subcharts = ["@kubecf_helm_dependencies//charts"],
)

genrule(
    name = "release_chart",
    tools = [
        "//rules/kubecf:release_chart.sh",
        "@jq//:binary",
        "@helm//:binary",
    ],
    srcs = [
        ":kubecf",
        ":image_list",
    ],
    outs = ["kubecf_release.tgz"],
    cmd = "$(location //rules/kubecf:release_chart.sh) $(location :kubecf) $(location :image_list) $@ $(location @jq//:binary) $(location @helm//:binary)",
)

# Generates a file containing only the KubeCF version.
helm_version(
    name = "version",
    chart = ":kubecf",
)

# Generates a JSON file containing the list of images being used by KubeCF.
image_list(
    name = "image_list",
    chart = ":kubecf",
)

# Prints the list of images being used by KubeCF.
print_files(
    name = "print_image_list",
    srcs = [":image_list"],
)
