# The config.yaml file is a collection of settings one might want to change
# if they are deploying a second copy of the kubecf pipeline.
# It is meant to provide a way to not pollute the "production" resources with
# data from testing and developing the pipeline.
# The production pipeline should always be deployed without a config.yaml.
# This will use the same (default) values every time, so people deploying it
# don't have to know what kind of values were used when it was deployed last
# time.

# Variables
{{ $availableCfSchedulers := slice "diego" "eirini" }} # Diego / Eirini
{{ $pr_resources := slice "pr" "fork-pr" }}
{{ $branches := slice "master" "release-2.2"}} # Repository branches to track

# Prod and no-prod jobs
# Jobs that are stable and ready should go into $prod.

# Production ready Jobs
# cf-acceptance-tests-* and smoke-test-* are a Special case, as Eirini is not ready, we don't want smoke/CATs to end up in prod job view.
# TODO: Delete the special case here as soon as we get Eirini CATS green and we stabilize Eirini smoke (e.g. with a more large timeout)
{{ $prod := slice "lint" "build" "cf-acceptance-tests-diego" "smoke-tests-diego" }}

# Jobs that aren't reliable yet, nor production ready
{{ $noprod := slice "cf-acceptance-tests-eirini" "smoke-tests-eirini" "upgrade-test"}}

# Add jobs for each scheduler in the correct category
{{range $_, $cfScheduler := $availableCfSchedulers }}

  # Generate the prod slice in the range, so we have the full list for the tab view group
  {{ $prod = $prod | append ( printf "deploy-%s" $cfScheduler ) }}

  # Add SITS only for diego, but keep it in the loop so it gets added in the correct order.
  {{ if eq $cfScheduler "diego" }}
    {{ $noprod = $noprod | append "sync-integration-tests" }}
  {{ end }}
  {{ $noprod = $noprod | append ( printf "ccdb-rotate-%s" $cfScheduler ) }}

  # Cleanup gets executed only at the end, make it into noprod as we need to keep it at the end
  {{ $noprod = $noprod | append ( printf "cleanup-%s-cluster" $cfScheduler ) }}
  {{ $noprod = $noprod | append ( printf "smoke-tests-post-rotate-%s" $cfScheduler ) }}
{{ end }}

{{ $group_prod := slice "publish" }}
{{ $group_noprod := slice }}
{{ $group_all := slice "publish" }}

{{ range $_, $branch := (flatten (slice $branches $pr_resources) | uniq ) }}
{{ range $_, $test := $prod }}
  {{ $group_prod = $group_prod | append ( printf "%s-%s" $test $branch ) }}
  {{ $group_all = $group_all | append ( printf "%s-%s" $test $branch ) }}
{{ end }}
{{ range $_, $test := $noprod }}
  {{ $group_noprod = $group_noprod | append ( printf "%s-%s" $test $branch ) }}
  {{ $group_all = $group_all | append ( printf "%s-%s" $test $branch ) }}
{{ end }}
{{ end }}

groups:
- name: prod
  jobs: [ {{ join $group_prod "," }} ]

- name: no-prod
  jobs: [ {{ join $group_noprod "," }} ]

- name: all
  # Joins prod and noprod with a "," while filtering elements making them uniques.
  jobs: [ {{ join $group_all "," }} ]

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: github-status
  type: docker-image
  source:
    repository: resource/github-status
    tag: release

resources:
- name: semver.gke-cluster
  type: semver
  source:
    driver: s3
    bucket: {{ if has . "s3_bucket" }}{{ .s3_bucket }}{{ else }}kubecf-ci{{ end }}
    key: gke-cluster
    initial_version: 0.0.1
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ if has . "s3_bucket_region" }}{{ .s3_bucket_region }}{{ else }}"eu-central-1"{{ end }}

- name: kubecf-github-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubecf
    access_token: ((github-access-token))

{{- range $_, $branch := $branches }}
- name: kubecf-{{ $branch }}
  type: git
  source:
    branch: {{ $branch }}
    uri: https://github.com/{{ if has . "kubecf_repository" }}{{ .kubecf_repository }}{{ else }}{{ "cloudfoundry-incubator/kubecf" }}{{ end }}
- name: status-{{ $branch }}.src
  type: github-status
  source:
    repo: {{ if has . "kubecf_repository" }}{{ .kubecf_repository }}{{ else }}{{ "cloudfoundry-incubator/kubecf" }}{{ end }}
    access_token: ((github-access-token))
{{ end }}

- name: kubecf-pr
  type: pull-request
  check_every: 10m
  source:
    repository: {{ if has . "kubecf_repository" }}{{ .kubecf_repository }}{{ else }}{{ "cloudfoundry-incubator/kubecf" }}{{ end }}
    access_token: ((github-access-token))
    disable_forks: true # Trigger on kubecf branches only
    required_review_approvals: 1

- name: kubecf-fork-pr
  type: pull-request
  check_every: 10m
  source:
    repository: {{ if has . "kubecf_repository" }}{{ .kubecf_repository }}{{ else }}{{ "cloudfoundry-incubator/kubecf" }}{{ end }}
    access_token: ((github-access-token))
    disable_forks: false # Trigger on kubecf branches only
    required_review_approvals: 1

{{- range $_, $pr := $pr_resources }}

- name: status-{{$pr}}.src
  type: github-status
  source:
    repo: {{ if has . "kubecf_repository" }}{{ .kubecf_repository }}{{ else }}{{ "cloudfoundry-incubator/kubecf" }}{{ end }}
    access_token: ((github-access-token))

{{- end }}

- name: catapult
  type: git
  source:
    uri: https://github.com/SUSE/catapult
  version:
    ref: d1ea00e409bb5dd75055da1fda174875fc17b773

- name: s3.kubecf-ci
  type: s3
  source:
    bucket: {{ if has . "s3_bucket" }}{{ .s3_bucket }}{{ else }}kubecf-ci{{ end }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ if has . "s3_bucket_region" }}{{ .s3_bucket_region }}{{ else }}"eu-central-1"{{ end }}
    regexp: kubecf-v(.*).tgz

- name: s3.kubecf-ci-bundle
  type: s3
  source:
    bucket: {{ if has . "s3_bucket" }}{{ .s3_bucket }}{{ else }}kubecf-ci{{ end }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ if has . "s3_bucket_region" }}{{ .s3_bucket_region }}{{ else }}"eu-central-1"{{ end }}
    regexp: kubecf-bundle-v(.*).tgz

- name: s3.kubecf
  type: s3
  source:
    bucket: {{ if has . "s3_final_bucket" }}{{ .s3_final_bucket }}{{ else }}kubecf{{ end }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ if has . "s3_final_bucket_region" }}{{ .s3_final_bucket_region }}{{ else }}"us-west-2"{{ end }}
    regexp: kubecf-v(.*).tgz

- name: s3.kubecf-bundle
  type: s3
  source:
    bucket: {{ if has . "s3_final_bucket" }}{{ .s3_final_bucket }}{{ else }}kubecf{{ end }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ if has . "s3_final_bucket_region" }}{{ .s3_final_bucket_region }}{{ else }}"us-west-2"{{ end }}
    regexp: kubecf-bundle-v(.*).tgz

deploy_args: &deploy_args
- -ce
- |

  # Login to gcloud
  printf "%s" '((gke-suse-cap-json))' > $PWD/gke-key.json
  export GKE_CRED_JSON=$PWD/gke-key.json
  gcloud auth activate-service-account --key-file $PWD/gke-key.json

  export GKE_PROJECT={{ if has . "gke_project" }}{{ .gke_project }}{{ else }}"suse-225215"{{ end }}
  export GKE_CLUSTER_ZONE={{ if has . "gke_zone" }}{{ .gke_zone }}{{ else }}"europe-west3-c"{{ end }}
  export GKE_CLUSTER_NAME="kubecf-ci-$(cat semver.gke-cluster/version | sed 's/\./-/g')"

  gcloud --quiet beta container \
    --project "${GKE_PROJECT}" clusters create "${GKE_CLUSTER_NAME}" \
    --zone "${GKE_CLUSTER_ZONE}" \
    --no-enable-basic-auth \
    --machine-type "n1-highcpu-16" \
    --image-type "UBUNTU" \
    --disk-type "pd-ssd" \
    --disk-size "100" \
    --metadata disable-legacy-endpoints=true \
    --scopes "https://www.googleapis.com/auth/devstorage.read_only","https://www.googleapis.com/auth/logging.write","https://www.googleapis.com/auth/monitoring","https://www.googleapis.com/auth/servicecontrol","https://www.googleapis.com/auth/service.management.readonly","https://www.googleapis.com/auth/trace.append" \
    --preemptible \
    --num-nodes "1" \
    --enable-stackdriver-kubernetes \
    --enable-ip-alias \
    --network "projects/${GKE_PROJECT}/global/networks/default" \
    --subnetwork "projects/${GKE_PROJECT}/regions/$(echo ${GKE_CLUSTER_ZONE} | sed 's/-.$//')/subnetworks/default" \
    --default-max-pods-per-node "110" \
    --no-enable-master-authorized-networks \
    --addons HorizontalPodAutoscaling,HttpLoadBalancing \
    --no-enable-autorepair \
    --no-enable-autoupgrade

  # Get a kubeconfig
  gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE} --project "${GKE_PROJECT}"

  export SCF_LOCAL="${PWD}/kubecf"
  export SCF_CHART="$(readlink -f s3.kubecf-ci/*.tgz)"
  export SCF_OPERATOR=true
  export FORCE_DELETE=true
  export HELM_VERSION="v3.1.1"
  export SCF_TESTGROUP=true
  export BACKEND=gke
  export DOCKER_ORG=cap-staging
  export QUIET_OUTPUT=true
  export DOWNLOAD_CATAPULT_DEPS=false
  export KUBECFG="$(readlink -f ~/.kube/config)"

  # https://unix.stackexchange.com/a/265151
  read -r -d '' CONFIG_OVERRIDE <<'EOF' || true
  sizing:
    diego_cell:
      ephemeral_disk:
        size: 300000
  EOF
  export CONFIG_OVERRIDE

  pushd catapult
  # Bring up a k8s cluster and builds+deploy kubecf
  # https://github.com/SUSE/catapult/wiki/Build-and-run-SCF#build-and-run-kubecf
  make kubeconfig scf

test_args: &test_args
- -ce
- |

  # Login to gcloud
  printf "%s" '((gke-suse-cap-json))' > $PWD/gke-key.json
  export GKE_CRED_JSON=$PWD/gke-key.json
  gcloud auth activate-service-account --key-file $PWD/gke-key.json

  export GKE_PROJECT={{ if has . "gke_project" }}{{ .gke_project }}{{ else }}"suse-225215"{{ end }}
  export GKE_CLUSTER_ZONE={{ if has . "gke_zone" }}{{ .gke_zone }}{{ else }}"europe-west3-c"{{ end }}
  export GKE_CLUSTER_NAME="kubecf-ci-$(cat semver.gke-cluster/version | sed 's/\./-/g')"

  # Get a kubeconfig
  gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE} --project "${GKE_PROJECT}"

  export BACKEND=gke
  export KUBECF_TEST_SUITE="${TEST_SUITE:-smokes}"
  export SCF_LOCAL="${PWD}/kubecf"
  export KUBECF_NAMESPACE="scf"
  export QUIET_OUTPUT=true
  export DOWNLOAD_CATAPULT_DEPS=false
  export KUBECFG="$(readlink -f ~/.kube/config)"
  export KUBECF_CHECKOUT="${SCF_LOCAL}"
  pushd catapult
  # Grabs back a deployed cluster and runs test suites on it
  # See: https://github.com/SUSE/catapult/wiki/Running-SCF-tests#kubecf
  make kubeconfig tests-kubecf

rotate_args: &rotate_args
- -ce
- |

  # Login to gcloud
  printf "%s" '((gke-suse-cap-json))' > $PWD/gke-key.json
  export GKE_CRED_JSON=$PWD/gke-key.json
  export GKE_CLUSTER_NAME="kubecf-ci-$(cat semver.gke-cluster/version | sed 's/\./-/g')"

  gcloud auth activate-service-account --key-file $PWD/gke-key.json
  # Get a kubeconfig
  gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE} --project "${GKE_PROJECT}"

  export BACKEND=gke
  export KUBECF_NAMESPACE="scf"
  export QUIET_OUTPUT=true
  export DOWNLOAD_CATAPULT_DEPS=false
  export KUBECFG="$(readlink -f ~/.kube/config)"
  export KUBECF_CHECKOUT="${PWD}/kubecf"
  export KUBECF_INSTALL_NAME="susecf-scf"

  pushd catapult
  make kubeconfig
  source build*/.envrc

  pushd "${KUBECF_CHECKOUT}"
  testing/ccdb_key_rotation/rotate-ccdb-keys-test.sh

jobs:

{{ $path := "" }}
{{- range $_, $branch := flatten (slice $branches $pr_resources)  }}

{{ if or (eq $branch "fork-pr") (eq $branch "pr" )}}
{{ $path = ".git/resource/head_sha" }}
{{ else }}
{{ $path = ".git/short_ref" }}
{{ end }}

{{ $sanitized_branch_name := replaceAll "." "_" $branch }}

- name: lint-{{ $branch }}
  public: true
  plan:
  - get: kubecf-{{ $branch }}
{{- if ne $branch "fork-pr" }}
    trigger: true
{{- end }}
    version: "every"
{{- if has $prod "lint" }}
  - put: status-{{ $branch }}.src
    params: &lint_{{ $sanitized_branch_name }}_status
        context: lint
        description: "Lint started"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - task: lint
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: kubecf-{{ $branch }}
      run:
        path: "/bin/bash"
        args:
        - -ce
        - |
          cd kubecf-{{ $branch }}
          ./dev/linters/shellcheck.sh
          ./dev/linters/yamllint.sh
          ./dev/linters/helmlint.sh
          bazel test //rules/kubecf:create_sample_values_test

{{- if has $prod "lint" }}
    on_success:
      put: status-{{ $branch }}.src
      params:
        << : *lint_{{ $sanitized_branch_name }}_status
        state: success
    on_failure:
      put: status-{{ $branch }}.src
      params:
        << : *lint_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}

- name: build-{{ $branch }}
  public: false # TODO: public or not?
  plan:
  - get: kubecf-{{ $branch }}
    trigger: true
    version: "every"
    passed:
    - lint-{{ $branch }}
{{- if has $prod "build" }}
  - put: status-{{ $branch }}.src
    params: &build_{{ $sanitized_branch_name }}_status
        context: build
        description: "Build started"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - task: build
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: kubecf-{{ $branch }}
      outputs:
      - name: output
      run:
        path: "/bin/bash"
        args:
        - -ce
        - |
          cd kubecf-{{ $branch }}
          ./dev/build.sh ../output
{{- if has $prod "build" }}
    on_success:
      put: status-{{ $branch }}.src
      params:
        << : *build_{{ $sanitized_branch_name }}_status
        state: success
    on_failure:
      put: status-{{ $branch }}.src
      params:
        << : *build_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  - put: s3.kubecf-ci
    params:
      file: output/kubecf-v*.tgz
      acl: public-read
  - put: s3.kubecf-ci-bundle
    params:
      file: output/kubecf-bundle-v*.tgz
      acl: public-read

{{- range $_, $cfScheduler := $availableCfSchedulers }}

# prod-jobs
- name: deploy-{{ $cfScheduler }}-{{ $branch }}
  #max_in_flight: 1 # Re-enable to when we want to set a limit on concurrent deployments
  public: true
  # Consider adding a serial_group between the two $cfScheduler
  # if jobs starts to starve
  plan:
  - get: kubecf-{{ $branch }}
    trigger: true
    version: "every"
    passed:
    - build-{{ $branch }}
  - get: s3.kubecf-ci
    passed:
    - build-{{ $branch }}
  - get: s3.kubecf-ci-bundle
    passed:
    - build-{{ $branch }}
  - get: catapult
{{- if has $prod (printf "deploy-%s" $cfScheduler) }}
  - put: status-{{ $branch }}.src
    params: &deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "deploy-{{ $cfScheduler }}"
        description: "Deploy {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - put: semver.gke-cluster
    params: {bump: patch}
  - task: deploy
    timeout: 3h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: kubecf
      - name: catapult
      - name: s3.kubecf-ci
      - name: semver.gke-cluster
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        CATS_NODES: 8
        ENABLE_EIRINI: {{ eq $cfScheduler "eirini" }}
      run:
        path: "/bin/bash"
        args: *deploy_args
{{- if has $prod (printf "deploy-%s" $cfScheduler) }}
  on_success:
    do:
    - put: status-{{ $branch }}.src
      params:
        << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: success
{{- end }}
  on_failure:
    do:
{{- if has $prod (printf "deploy-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
    - task: cleanup-cluster
      config: &cleanup-cluster
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: splatform/catapult
        inputs:
        - name: semver.gke-cluster
        run:
          path: "/bin/bash"
          args:
          - -ce
          - |

            # Login to gcloud
            printf "%s" '((gke-suse-cap-json))' > $PWD/gke-key.json
            gcloud auth activate-service-account --key-file $PWD/gke-key.json
            export GKE_PROJECT={{ if has . "gke_project" }}{{ .gke_project }}{{ else }}"suse-225215"{{ end }}
            export GKE_CLUSTER_ZONE={{ if has . "gke_zone" }}{{ .gke_zone }}{{ else }}"europe-west3-c"{{ end }}
            export GKE_CLUSTER_NAME="kubecf-ci-$(cat semver.gke-cluster/version | sed 's/\./-/g')"
            # Obtain pvc disks associated to the cluster
            IDS=$(gcloud compute disks list \
                  --filter="zone~${GKE_CLUSTER_ZONE}" \
                  --filter="name~${GKE_CLUSTER_NAME} AND name~pvc" \
                  --format="value(id)" \
                  --project=${GKE_PROJECT})
            # Delete cluster
            gcloud --quiet container --project "${GKE_PROJECT}" clusters delete "${GKE_CLUSTER_NAME}" \
                   --zone "${GKE_CLUSTER_ZONE}"
            # Delete pvc disks associated to the cluster, now that they are free
            for ID in ${IDS}; do
                gcloud compute disks delete ${ID} --zone=${GKE_CLUSTER_ZONE} \
                                                  --project="${GKE_PROJECT}" --quiet;
            done
  on_abort:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "deploy-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  on_error:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "deploy-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}

{{ $previousTest := "" }}

- name: smoke-tests-{{ $cfScheduler }}-{{ $branch }}
  public: true
  plan:
  - get: kubecf-{{ $branch }}
    trigger: true
    version: "every"
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: s3.kubecf-ci
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: s3.kubecf-ci-bundle
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: semver.gke-cluster
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: catapult
{{- if has $prod (printf "smoke-tests-%s" $cfScheduler) }}
  - put: status-{{ $branch }}.src
    params: &smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "smoke-tests-{{ $cfScheduler }}"
        description: "Smoke tests {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - task: test-{{ $cfScheduler }}
    input_mapping:
      kubecf: kubecf-{{ $branch }}
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      - name: semver.gke-cluster
      params:
        DEFAULT_STACK: cflinuxfs3
        TEST_SUITE: smokes
      run:
        path: "/bin/bash"
        args: *test_args
{{- if has $prod (printf "smoke-tests-%s" $cfScheduler) }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
{{- end }}
  on_failure:
    do:
{{- if has $prod (printf "smoke-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
  on_abort:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "smoke-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  on_error:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "smoke-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
{{ $previousTest = (printf "smoke-tests-%s-%s" $cfScheduler $branch) }}

- name: cf-acceptance-tests-{{ $cfScheduler }}-{{ $branch }}
  public: true
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci-bundle
    passed:
    - {{ $previousTest | quote }}
  - get: semver.gke-cluster
    passed:
    - {{ $previousTest | quote }}
  - get: catapult
{{- if has $prod (printf "cf-acceptance-tests-%s" $cfScheduler) }}
  - put: status-{{ $branch }}.src
    params: &cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "cf-acceptance-tests-{{ $cfScheduler }}"
        description: "Acceptance tests {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - task: test-{{ $cfScheduler }}
    timeout: 5h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      - name: semver.gke-cluster
      params:
        DEFAULT_STACK: cflinuxfs3
        TEST_SUITE: cats
      run:
        path: "/bin/bash"
        args: *test_args

{{- if has $prod (printf "cf-acceptance-tests-%s" $cfScheduler) }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
{{- end }}

  on_failure:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "cf-acceptance-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  on_abort:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "cf-acceptance-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  on_error:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "cf-acceptance-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
{{ $previousTest = (printf "cf-acceptance-tests-%s-%s" $cfScheduler $branch) }}

# no-prod jobs

{{- if eq $cfScheduler "diego" }}
- name: sync-integration-tests-{{ $branch }}
  public: true
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci-bundle
    passed:
    - {{ $previousTest | quote }}
  - get: semver.gke-cluster
    passed:
    - {{ $previousTest | quote }}
  - get: catapult
{{- if has $prod "sync-integration-tests" }}
  - put: status-{{ $branch }}.src
    params: &sits_{{ $sanitized_branch_name }}_status
        context: "sync-integration-tests"
        description: "Sync Integration tests"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - task: test-{{ $cfScheduler }}
    timeout: 1h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      params:
        DEFAULT_STACK: cflinuxfs3
        TEST_SUITE: sits
        CLUSTER_NAME_PREFIX: kubecf-{{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *test_args
{{- if has $prod "sync-integration-tests" }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *sits_{{ $sanitized_branch_name }}_status
      state: success
{{- end }}
  on_failure:
    do:

{{- if has $prod "sync-integration-tests" }}
    - put: status-{{ $branch }}.src
      params:
        << : *sits_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}

    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
  on_abort:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster

{{- if has $prod "sync-integration-tests" }}
    - put: status-{{ $branch }}.src
      params:
        << : *sits_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}

  on_error:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod "sync-integration-tests" }}
    - put: status-{{ $branch }}.src
      params:
        << : *sits_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
{{ $previousTest = (printf "sync-integration-tests-%s" $branch) }}
{{- end }}

- name: ccdb-rotate-{{ $cfScheduler }}-{{ $branch }}
  public: true
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci-bundle
    passed:
    - {{ $previousTest | quote }}
  - get: semver.gke-cluster
    passed:
    - {{ $previousTest | quote }}
  - get: catapult
{{- if has $prod (printf "rotate-%s" $cfScheduler) }}
  - put: status-{{ $branch }}.src
    params: &rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "rotate-{{ $cfScheduler }}"
        description: "Rotating secrets {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - task: rotate-{{ $cfScheduler }}
    timeout: 1h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      params:
        DEFAULT_STACK: cflinuxfs3
        CLUSTER_NAME_PREFIX: kubecf-{{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *rotate_args

{{- if has $prod (printf "rotate-%s" $cfScheduler) }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
{{- end }}

  on_failure:
    do:
{{- if has $prod (printf "rotate-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
        params:
          CLUSTER_NAME_PREFIX: "kubecf-{{ $cfScheduler }}"
  on_abort:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "rotate-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  on_error:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "rotate-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
{{ $previousTest = (printf "ccdb-rotate-%s-%s" $cfScheduler $branch) }}

- name: smoke-tests-post-rotate-{{ $cfScheduler }}-{{ $branch }}
  public: true
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci-bundle
    passed:
    - {{ $previousTest | quote }}
  - get: semver.gke-cluster
    passed:
    - {{ $previousTest | quote }}
  - get: catapult
{{- if has $prod (printf "smoke-rotated-{%s" $cfScheduler) }}
  - put: status-{{ $branch }}.src
    params: &smoke_rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "smoke-rotated-{{ $cfScheduler }}"
        description: "Smoke tests after rotating secrets {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - task: test-{{ $cfScheduler }}
    input_mapping:
      kubecf: kubecf-{{ $branch }}
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      params:
        DEFAULT_STACK: cflinuxfs3
        TEST_SUITE: smokes
      run:
        path: "/bin/bash"
        args: *test_args

{{- if has $prod (printf "smoke-rotated-{%s" $cfScheduler) }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *smoke_rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
{{- end }}

  on_failure:
    do:

{{- if has $prod (printf "smoke-rotated-{%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *smoke_rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}

    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
  on_abort:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "smoke-rotated-{%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *smoke_rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  on_error:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
{{- if has $prod (printf "smoke-rotated-{%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *smoke_rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
{{ $previousTest = (printf "smoke-tests-post-rotate-%s-%s" $cfScheduler $branch) }}

# TODO: re-enable and re-adapt once BRAIN tests are fixed.
# - name: brain-tests-{{ $cfScheduler }}
#   public: true
#   plan:
#   - get: commit-to-test
#     passed:
#     - sync-integration-tests-{{ $cfScheduler }}
#     trigger: true
#     version: "every"
#   - get: s3.kubecf-ci
#     passed:
#     - sync-integration-tests-{{ $cfScheduler }}
#   - get: s3.kubecf-ci-bundle
#     passed:
#     - sync-integration-tests-{{ $cfScheduler }}
#   - get: catapult
#   - task: test-{{ $cfScheduler }}
#     timeout: 1h30m
#     config:
#       platform: linux
#       image_resource:
#         type: registry-image
#         source:
#           repository: splatform/catapult
#       inputs:
#       - name: catapult
#       - name: commit-to-test
#       outputs:
#       - name: output
#       params:
#         DEFAULT_STACK: cflinuxfs3
#         EKCP_HOST: ((ekcp-host))
#         TEST_SUITE: brain
#         CLUSTER_NAME_PREFIX: kubecf-{{ $cfScheduler }}
#       run:
#         path: "/bin/bash"
#         args: *test_args
#     on_success:
#       put: commit-to-test
#       params:
#         description: "Brain tests on {{ $cfScheduler }} succeeded"
#         state: "success"
#         contexts: "brain-tests-{{ $cfScheduler }}"
#         commit_path: "commit-to-test/.git/resource/ref"
#         version_path: "commit-to-test/.git/resource/version"
#     on_failure:
#       do:
#       - put: commit-to-test
#         params:
#           description: "Brain tests on {{ $cfScheduler }} failed"
#           state: "failure"
#           commit_path: "commit-to-test/.git/resource/ref"
#           version_path: "commit-to-test/.git/resource/version"
#           contexts: "brain-tests-{{ $cfScheduler }}"
#       - task: cleanup-cluster
#         config:
#           <<: *cleanup-cluster
#           params:
#             CLUSTER_NAME_PREFIX: "kubecf-{{ $cfScheduler }}"
#             EKCP_HOST: ((ekcp-host))
#     on_abort:
#       task: cleanup-cluster
#       config:
#         <<: *cleanup-cluster
#         params:
#           CLUSTER_NAME_PREFIX: "kubecf-{{ $cfScheduler }}"
#           EKCP_HOST: ((ekcp-host))


- name: cleanup-{{ $cfScheduler }}-cluster-{{ $branch }}
  public: true
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  ensure:
   do:
   - task: cleanup-cluster
     config:
       <<: *cleanup-cluster

{{ end }} # of range cfscheduler

- name: upgrade-test-{{ $branch }}
  plan:
  - in_parallel:
    - get: kubecf-github-release
    - get: kubecf-{{ $branch }}
      trigger: true
      version: "every"
      passed:
      - build-{{ $branch }}
    - get: s3.kubecf-ci
      passed:
      - build-{{ $branch }}
    - get: s3.kubecf-ci-bundle
      passed:
      - build-{{ $branch }}
    - get: catapult
    - put: semver.gke-cluster
      params: {bump: patch}
  - task: upgrade
    input_mapping:
      kubecf: kubecf-{{ $branch }}
    timeout: 4h
    file: kubecf-{{ $branch }}/.concourse/tasks/upgrade.yaml
  ensure:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster

{{ end }} # of branch

- name: publish
  public: true
  plan:
  - get: kubecf-master
    passed:
    - cf-acceptance-tests-diego-master
    # TODO: Uncomment as soon as eirini tests are green
    # TODO: Does this work? It might check the wrong thing
    # - cf-acceptance-tests-eirini
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - cf-acceptance-tests-diego-master
  - get: s3.kubecf-ci-bundle
    passed:
    - cf-acceptance-tests-diego-master
  - put: s3.kubecf
    params:
      file: s3.kubecf-ci/kubecf-v*.tgz
  - put: s3.kubecf-bundle
    params:
      file: s3.kubecf-ci-bundle/kubecf-bundle-v*.tgz
